name: Deploy to GitHub Releases
on:
  push:
    branches: [ master ]

jobs:
  extract-metadata:
    name: Extract Version and Changelog
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      changelog: ${{ steps.extract.outputs.changelog }}
      artifact: ${{ steps.extract.outputs.artifact }}
    steps:
      # 检出代码
      - name: Check Out Code
        uses: actions/checkout@v4

      # 提取版本号和日志
      - name: Extract Version and Changelog
        id: extract
        run: |
          # 验证 CHANGELOG 文件是否存在
          if [ ! -f CHANGELOG.md ]; then
            echo "Error: CHANGELOG.md not found" >&2
            exit 1
          fi

          # 提取最新版本号
          VERSION=$(awk '/^## \[/{gsub(/[^0-9.]/, "", $2); print $2; exit}' CHANGELOG.md)
          if [ -z "$VERSION" ]; then
            echo "Error: Version not found in CHANGELOG.md" >&2
            exit 1
          fi

          # 提取物料名称
          ARTIFACT=$(basename "${{ github.repository }}").user.js-$VERSION
          echo "artifact=$ARTIFACT"

          # 提取变更日志
          START_LINE=$(grep -n '^## \[' CHANGELOG.md | head -n 1 | cut -d: -f1)
          END_LINE=$(grep -n '^## \[' CHANGELOG.md | sed -n '2p' | cut -d: -f1)
          END_LINE=${END_LINE:-$(wc -l < CHANGELOG.md)}
          
          CHANGELOG=$(sed -n "$((START_LINE - 1)),$((END_LINE - 1))p" CHANGELOG.md)

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "artifact=$ARTIFACT" >> $GITHUB_OUTPUT

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: extract-metadata
    steps:
      # 检出代码
      - name: Check Out Code
        uses: actions/checkout@v4

      # 安装 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 安装依赖
      - name: Install Dependencies
        run: npm ci

      # 运行构建
      - name: Build Project
        run: npm run build

      # 上传构建产物
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.extract-metadata.outputs.artifact }}
          path: dist/*

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [ extract-metadata, build ]
    permissions:
      contents: write
    steps:
      # 检出代码
      - name: Check Out Code
        uses: actions/checkout@v4

      # 下载构建产物
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.extract-metadata.outputs.artifact }}
          path: dist

      # 创建发布草稿
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 删除现有草稿（可选）
          gh api repos/${{ github.repository }}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/${{ github.repository }}/releases/{} || true

          # 创建发布草稿
          gh release create v${{ needs.extract-metadata.outputs.version }} \
            --draft \
            --title "v${{ needs.extract-metadata.outputs.version }}" \
            --notes "${{ needs.extract-metadata.outputs.changelog }}" \
            dist/*
